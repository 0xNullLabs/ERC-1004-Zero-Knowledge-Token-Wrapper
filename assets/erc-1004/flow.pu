```uml
@startuml
actor Alice1
actor Alice2
participant "ZWToken Contract" as ZW
participant "Underlying Token" as U

Alice1 -> U : underlying.approve(ZWToken Contract, amount)
Alice1 -> ZW : ZWToken.deposit(amount)
ZW -> U : underlying.transferFrom(Alice1, ZWToken Contrac, amount)
ZW -> Alice1 : mint ZWToken(amount)
ZW -> ZW : emit Deposited

Alice1 -> ZW : ZWToken.transfer(amount) to provable burn address
ZW -> ZW : update commitment
ZW -> ZW : Optional: emit CommitmentUpdated(commitment, to, amount)

Alice2 -> ZW : fetch commit data / listen CommitmentUpdated
Alice2 -> Alice2 : rebuild commitment state
Alice2 -> Alice2 : generate proof for remint

Alice2 -> ZW : ZWToken.remint(proof, commitment, nullifier, to, amount)
ZW -> ZW : verify ZK proof
ZW -> ZW : check nullifier
ZW -> ZW : mark nullifier used
ZW -> ZW : mint ZWToken(to, amount)
ZW -> ZW : emit CommitmentUpdated(commitment, to, amount)
ZW -> Alice2 : receive ZWToken
ZW -> ZW : emit Reminted

Alice2 -> ZW : ZWToken.withdraw(amount)
ZW -> ZW : burn ZWToken
ZW -> U : underlying.transfer(to=Alice2, amount)
ZW -> Alice2 : receive underlying
ZW -> ZW : emit Withdrawn
@enduml
```